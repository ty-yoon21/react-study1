// Generated using webpack-cli https://github.com/webpack/webpack-cli

const path = require("path");

const webpack = require('webpack');
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const isProduction = process.env.NODE_ENV == "production";


const stylesHandler = isProduction
    ? MiniCssExtractPlugin.loader
    : "style-loader";

const config = {
    entry: "./src/index.js",
    output: {
        path: path.resolve(__dirname, "dist"),
        filename: '[name].js',
        chunkFilename: '[name].chunk.js',
        publicPath: '/'
    },

    devServer: {
        open: true,
        host: "localhost",
        port: 3000, // port number
        historyApiFallback: true,
        proxy: {
            "/api/": { // /api로 시작하는 경로일 경우, ex) /api/rest/myInfo
                target: "http://localhost:8080", // 요청 url 앞에 target을 붙여주기, ex) http://localhost:8080/api/rest/myInfo
                //pathRewrite: {"/api": "/"}, // /api에 해당하는 url을 없애기, ex) http://localhost:8080/rest/myInfo
                changeOrigin: true
            }
        }
    },

    plugins: [
        //new HtmlWebpackPlugin({
        //  template: "index.html",
        //}),
        new HtmlWebpackPlugin({
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
            template: './index.html',
        }),

        // Add your plugins here
        // Learn more about plugins from https://webpack.js.org/configuration/plugins/

        new MiniCssExtractPlugin({
            filename: "[name].css",
            chunkFilename: "static/css/[name].[hash:8].css"
        })
    ],

    resolve: {
        fallback: {
            //util: require.resolve("util/"),
            //"crypto": require.resolve("crypto-browserify"),
            //"stream": require.resolve("stream-browserify")
        },

        //modules: ['node_modules', 'app'],
        modules: [path.resolve(__dirname, '..', 'src'), 'node_modules', 'app'],
        extensions: ['.js', '.jsx', '.react.js'],
        mainFields: ['browser', 'jsnext:main', 'main']
    },

    module: {
        rules: [
            {
                test: /\.(js|jsx)$/i,
                loader: "babel-loader",
            },

            {
                test: /\.html$/,
                use: [
                    {
                        loader: "html-loader",
                        options: {minimize: true}
                    }
                ]
            },

            {
                test: /\.css$/,
                use: [MiniCssExtractPlugin.loader, "css-loader"]
            },

            {
                test: /\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i,
                type: "asset",
            },

            // Add your rules for custom modules here
            // Learn more about loaders from https://webpack.js.org/loaders/
            // Scss compiler
            {
                test: /\.s[ac]ss$/i,
                use: [
                    // Creates `style` nodes from JS strings
                    "style-loader",
                    // Translates CSS into CommonJS
                    "css-loader",
                    // Compiles Sass to CSS
                    "sass-loader",
                ],
            },
        ],
    },
};


 

module.exports = () => {

    if (isProduction) {
        config.mode = "production";
        config.plugins.push(new MiniCssExtractPlugin());
    } else {
        config.mode = "development";
    }
    return config;
};